/**
 * ZuluIDE™ - Copyright (c) 2023 Rabbit Hole Computing™
 *
 * ZuluIDE™ firmware is licensed under the GPL version 3 or any later version. 
 *
 * https://www.gnu.org/licenses/gpl-3.0.html
 * ----
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version. 
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details. 
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
**/

; RP2040 PIO program for QSPI communication with FPGA
; Run "pioasm rp2040_fpga_qspi.pio rp2040_fpga_qspi.pio.h" to regenerate the C header from this.

; QSPI read/write program
; Input shift register: shift right, autopush, threshold 8, 16 or 32 bits
; Output shift register: shift right, autopull, threshold 8, 16 or 32 bits
; OUT mapping: 4 QSPI data pins
; IN mapping: 4 QSPI data pins
; SIDESET mapping: SCK pin
;
; The transfer size per FIFO entry is set by autopush & autopull thresholds.
; Using 16- or 32-bit sizes improves performance but requires divisible total count.
;
; When writing, the RX FIFO contents can be discarded.
; When reading, the TX FIFO is written with dummy bytes to set number of items.
;
; Pin directions should be set before starting the program.
;
; Designed to run with PIO input synchronizers disabled.
; Timing is designed to account for the 1 register delay on both PIO input and output.
;
; Currently QSPI bus is run at 31.25 MHz, giving 15.6 MB/s throughput.
;
; See https://github.com/raspberrypi/pico-feedback/issues/280

.program fpga_qspi_transfer
.side_set 1
    out PINS, 4     side 0    ; Write low nibble or wait for new data
    nop             side 1    ; Clock rising edge
    in PINS, 4      side 1    ; Read low nibble, FPGA sees clock rising edge
    nop             side 1    ; Delay for FPGA latency
    out PINS, 4     side 1    ; Write high nibble
    nop             side 0    ; Clock falling edge
    in PINS, 4      side 0    ; Read high nibble
    nop             side 0    ; Delay for FPGA latency
